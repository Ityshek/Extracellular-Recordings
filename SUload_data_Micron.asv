function [raw_data, sampling_freq,StimChannel,stim_sampling_rate,Begin_record,channelflag,stimulus_times, stimulus_indexes,answer]= SUload_data_Micron(c,fname,pathname,answer)

StimType = answer{1}; DistortTrigger = answer{2};  Type = answer{3};
name=num2str(c);
data=load([pathname fname]);
if isfield(data,'data')
    data = data.data;
end
if c<=9
    var_str=['CSPK_00',name];
else
    var_str=['CSPK_0',name];
end
if isfield(data,var_str)
    channelflag =0;
    raw_data=double(getfield(data,var_str))*1.9;% convert to microvolts
else
    raw_data = [];
    channelflag =1;
end
if StimType == '1' % Check for NIR condition
    StimChannel = data.CAI_001;
    stim_sampling_rate=data.CAI_001_KHz*1000;
    sampling_freq=getfield(data,[var_str,'_KHz'])*1000;
    stim_Data=StimChannel;

    if Type == '1' % Check for Spatial Resolution condition
        StimChannel = data.CAI_002;
        stim_thresh = 1000;
        NumFrames = 2;
    elseif Type == '2' % Check for CFF condition
        for i=1:length(StimChannel)
            if StimChannel(i) <10 && StimChannel(i) > -10
                StimChannel(i) = NaN;
            end
            if StimChannel(i) ~= 0
                StimChannel(i) = StimChannel(i)-max(StimChannel);
            end
        end
        [a,b] = regexp(fname,'_[0123456789]*Hz');
        NumFrames = str2num(fname(a+1:b-2));
        for s=3:abs(min(StimChannel))
            NumTrigs = NumFrames*30; % Multiply by repetitions
            stim_thresh = -s;
            if length((find(circshift(StimChannel,[0 -1])>stim_thresh&StimChannel<stim_thresh))/stim_sampling_rate) == NumTrigs
                break
            end
        end
    else
        stim_thresh = 200;
        NumFrames = 1;
        stim_thresh = 5;
    end
    [startIndex,endIndex] = regexp(fname,'_\d*Hz');
    StimFreq = str2num(fname(startIndex+1:endIndex-2));
    [startIndex,endIndex] = regexp(fname,'_\d*ms');
    StimDur = str2num(fname(startIndex+1:endIndex-2));
    stimulus_times=(find(circshift(StimChannel,[0 -1])>stim_thresh&StimChannel<stim_thresh))/stim_sampling_rate;
    %stimulus_times = stimulus_times(1:round(length(stimulus_times)/NumFrames,0))
    stimulus_times = stimulus_times(1:NumFrames:end);
    stimulus_indexes=round(stimulus_times*sampling_freq);
    %stim=zeros(length(t_stim),1);
    %stim(round(stimulus_times*stim_sampling_rate))=  stim_thresh;
else % Check for VIS condition
    StimChannel = data.CAI_002;
    %     StimChannel = StimChannel - min(StimChannel);

    stim_thresh=30;
    if Type == '-' % Check for Null / Intensity Condition
        stim_thresh=1200; NumFrames = 2;
        sampling_freq=getfield(data,[var_str,'_KHz'])*1000;
        stim_sampling_rate=data.CAI_002_KHz*1000;
        t_stim=(0:length(StimChannel)-1)/stim_sampling_rate;
        stimulus_times=(find(circshift(StimChannel,[0 -1])<stim_thresh&StimChannel>stim_thresh))/stim_sampling_rate;
        stimulus_times = stimulus_times(1:NumFrames:end); stimulus_indexes=round(stimulus_times*sampling_freq);
    elseif Type == '2' % Check for CFF condition
        stim_thresh = 1000;
        [a,b] = regexp(fname,'_[0123456789]*Hz');
        NumFrames = str2num(fname(a+1:b-2))*2;
%         for i=1:length(StimChannel)
%             if StimChannel(i)>50 || StimChannel(i)<10
%                 StimChannel(i) = 0;
%             else
%                 StimChannel(i) = 40;
%             end
%         end
        sampling_freq=data.CSPK_017_KHz*1000;
        stim_sampling_rate=data.CAI_002_KHz*1000;
        t_stim=(0:length(StimChannel)-1)/stim_sampling_rate;
        stimulus_times=(find(circshift(StimChannel,[0 -1])<stim_thresh&StimChannel>stim_thresh))/stim_sampling_rate;
        if NumFrames == 128
            stimulus_times = stimulus_times(1:NumFrames-3:end);
        else
            EndPoint = round(length(stimulus_times)/NumFrames)*NumFrames;
            stimulus_times = stimulus_times(1:NumFrames:EndPoint);
        end
        stimulus_indexes=round(stimulus_times*sampling_freq);
        stim=zeros(length(t_stim),1);
        stim(round(stimulus_times*stim_sampling_rate))=  stim_thresh;
    else
        stim_thresh = 1000;
        NumFrames = 2;
        sampling_freq=getfield(data,[var_str,'_KHz'])*1000;
        stim_sampling_rate=data.CAI_002_KHz*1000;
        t_stim=(0:length(StimChannel)-1)/stim_sampling_rate;
        stimulus_times=(find(circshift(StimChannel,[0 -1])<stim_thresh&StimChannel>stim_thresh))/stim_sampling_rate;
        stimulus_times = stimulus_times(1:NumFrames:end);
        stimulus_indexes=round(stimulus_times*sampling_freq);
        stim=zeros(length(t_stim),1);
        stim(round(stimulus_times*stim_sampling_rate))=  stim_thresh;
    end


    if DistortTrigger == '1'
        First_stim = min((find(circshift(StimChannel,[0 -1])>stim_thresh&StimChannel<stim_thresh))/stim_sampling_rate);
        Last_stim = max((find(circshift(StimChannel,[0 -1])>stim_thresh&StimChannel<stim_thresh))/stim_sampling_rate);
        [startIndex,endIndex] = regexp(fname,'_\d*Hz');
        Trigger_Freq = str2double(fname(startIndex+1:endIndex-2));
        stimulus_times = [First_stim:1/Trigger_Freq:Last_stim];
        stimulus_indexes=round(stimulus_times*sampling_freq);
        stim=zeros(length(t_stim),1);
        stim(round(stimulus_times*stim_sampling_rate))=  stim_thresh;
    end
end
Begin_record=getfield(data,[var_str,'_TimeBegin']);
end
%%
